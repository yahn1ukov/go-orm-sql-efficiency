// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yahn1ukov/go-orm-sql-efficiency/ent/generated/order"
	"github.com/yahn1ukov/go-orm-sql-efficiency/ent/generated/orderproduct"
	"github.com/yahn1ukov/go-orm-sql-efficiency/ent/generated/product"
)

// OrderProduct is the model entity for the OrderProduct schema.
type OrderProduct struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID int `json:"order_id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID int `json:"product_id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderProductQuery when eager-loading is set.
	Edges        OrderProductEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrderProductEdges holds the relations/edges for other nodes in the graph.
type OrderProductEdges struct {
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderProductEdges) OrderOrErr() (*Order, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: order.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderProductEdges) ProductOrErr() (*Product, error) {
	if e.Product != nil {
		return e.Product, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: product.Label}
	}
	return nil, &NotLoadedError{edge: "product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderProduct) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderproduct.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case orderproduct.FieldID, orderproduct.FieldOrderID, orderproduct.FieldProductID, orderproduct.FieldQuantity:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderProduct fields.
func (op *OrderProduct) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderproduct.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			op.ID = int(value.Int64)
		case orderproduct.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				op.OrderID = int(value.Int64)
			}
		case orderproduct.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				op.ProductID = int(value.Int64)
			}
		case orderproduct.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				op.Quantity = int(value.Int64)
			}
		case orderproduct.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				op.Price = value.Float64
			}
		default:
			op.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderProduct.
// This includes values selected through modifiers, order, etc.
func (op *OrderProduct) Value(name string) (ent.Value, error) {
	return op.selectValues.Get(name)
}

// QueryOrder queries the "order" edge of the OrderProduct entity.
func (op *OrderProduct) QueryOrder() *OrderQuery {
	return NewOrderProductClient(op.config).QueryOrder(op)
}

// QueryProduct queries the "product" edge of the OrderProduct entity.
func (op *OrderProduct) QueryProduct() *ProductQuery {
	return NewOrderProductClient(op.config).QueryProduct(op)
}

// Update returns a builder for updating this OrderProduct.
// Note that you need to call OrderProduct.Unwrap() before calling this method if this OrderProduct
// was returned from a transaction, and the transaction was committed or rolled back.
func (op *OrderProduct) Update() *OrderProductUpdateOne {
	return NewOrderProductClient(op.config).UpdateOne(op)
}

// Unwrap unwraps the OrderProduct entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (op *OrderProduct) Unwrap() *OrderProduct {
	_tx, ok := op.config.driver.(*txDriver)
	if !ok {
		panic("generated: OrderProduct is not a transactional entity")
	}
	op.config.driver = _tx.drv
	return op
}

// String implements the fmt.Stringer.
func (op *OrderProduct) String() string {
	var builder strings.Builder
	builder.WriteString("OrderProduct(")
	builder.WriteString(fmt.Sprintf("id=%v, ", op.ID))
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", op.OrderID))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", op.ProductID))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", op.Quantity))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", op.Price))
	builder.WriteByte(')')
	return builder.String()
}

// OrderProducts is a parsable slice of OrderProduct.
type OrderProducts []*OrderProduct
