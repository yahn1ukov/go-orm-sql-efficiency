// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yahn1ukov/go-orm-sql-efficiency/ent/generated/order"
	"github.com/yahn1ukov/go-orm-sql-efficiency/ent/generated/orderproduct"
	"github.com/yahn1ukov/go-orm-sql-efficiency/ent/generated/product"
)

// OrderProductCreate is the builder for creating a OrderProduct entity.
type OrderProductCreate struct {
	config
	mutation *OrderProductMutation
	hooks    []Hook
}

// SetOrderID sets the "order_id" field.
func (opc *OrderProductCreate) SetOrderID(i int) *OrderProductCreate {
	opc.mutation.SetOrderID(i)
	return opc
}

// SetProductID sets the "product_id" field.
func (opc *OrderProductCreate) SetProductID(i int) *OrderProductCreate {
	opc.mutation.SetProductID(i)
	return opc
}

// SetQuantity sets the "quantity" field.
func (opc *OrderProductCreate) SetQuantity(i int) *OrderProductCreate {
	opc.mutation.SetQuantity(i)
	return opc
}

// SetPrice sets the "price" field.
func (opc *OrderProductCreate) SetPrice(f float64) *OrderProductCreate {
	opc.mutation.SetPrice(f)
	return opc
}

// SetOrder sets the "order" edge to the Order entity.
func (opc *OrderProductCreate) SetOrder(o *Order) *OrderProductCreate {
	return opc.SetOrderID(o.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (opc *OrderProductCreate) SetProduct(p *Product) *OrderProductCreate {
	return opc.SetProductID(p.ID)
}

// Mutation returns the OrderProductMutation object of the builder.
func (opc *OrderProductCreate) Mutation() *OrderProductMutation {
	return opc.mutation
}

// Save creates the OrderProduct in the database.
func (opc *OrderProductCreate) Save(ctx context.Context) (*OrderProduct, error) {
	return withHooks(ctx, opc.sqlSave, opc.mutation, opc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (opc *OrderProductCreate) SaveX(ctx context.Context) *OrderProduct {
	v, err := opc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opc *OrderProductCreate) Exec(ctx context.Context) error {
	_, err := opc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opc *OrderProductCreate) ExecX(ctx context.Context) {
	if err := opc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (opc *OrderProductCreate) check() error {
	if _, ok := opc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`generated: missing required field "OrderProduct.order_id"`)}
	}
	if _, ok := opc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`generated: missing required field "OrderProduct.product_id"`)}
	}
	if _, ok := opc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`generated: missing required field "OrderProduct.quantity"`)}
	}
	if _, ok := opc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`generated: missing required field "OrderProduct.price"`)}
	}
	if len(opc.mutation.OrderIDs()) == 0 {
		return &ValidationError{Name: "order", err: errors.New(`generated: missing required edge "OrderProduct.order"`)}
	}
	if len(opc.mutation.ProductIDs()) == 0 {
		return &ValidationError{Name: "product", err: errors.New(`generated: missing required edge "OrderProduct.product"`)}
	}
	return nil
}

func (opc *OrderProductCreate) sqlSave(ctx context.Context) (*OrderProduct, error) {
	if err := opc.check(); err != nil {
		return nil, err
	}
	_node, _spec := opc.createSpec()
	if err := sqlgraph.CreateNode(ctx, opc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	opc.mutation.id = &_node.ID
	opc.mutation.done = true
	return _node, nil
}

func (opc *OrderProductCreate) createSpec() (*OrderProduct, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderProduct{config: opc.config}
		_spec = sqlgraph.NewCreateSpec(orderproduct.Table, sqlgraph.NewFieldSpec(orderproduct.FieldID, field.TypeInt))
	)
	if value, ok := opc.mutation.Quantity(); ok {
		_spec.SetField(orderproduct.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if value, ok := opc.mutation.Price(); ok {
		_spec.SetField(orderproduct.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if nodes := opc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderproduct.OrderTable,
			Columns: []string{orderproduct.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := opc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderproduct.ProductTable,
			Columns: []string{orderproduct.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderProductCreateBulk is the builder for creating many OrderProduct entities in bulk.
type OrderProductCreateBulk struct {
	config
	err      error
	builders []*OrderProductCreate
}

// Save creates the OrderProduct entities in the database.
func (opcb *OrderProductCreateBulk) Save(ctx context.Context) ([]*OrderProduct, error) {
	if opcb.err != nil {
		return nil, opcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(opcb.builders))
	nodes := make([]*OrderProduct, len(opcb.builders))
	mutators := make([]Mutator, len(opcb.builders))
	for i := range opcb.builders {
		func(i int, root context.Context) {
			builder := opcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, opcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, opcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, opcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (opcb *OrderProductCreateBulk) SaveX(ctx context.Context) []*OrderProduct {
	v, err := opcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opcb *OrderProductCreateBulk) Exec(ctx context.Context) error {
	_, err := opcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opcb *OrderProductCreateBulk) ExecX(ctx context.Context) {
	if err := opcb.Exec(ctx); err != nil {
		panic(err)
	}
}
