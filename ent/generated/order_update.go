// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yahn1ukov/go-orm-sql-efficiency/ent/generated/customer"
	"github.com/yahn1ukov/go-orm-sql-efficiency/ent/generated/order"
	"github.com/yahn1ukov/go-orm-sql-efficiency/ent/generated/orderproduct"
	"github.com/yahn1ukov/go-orm-sql-efficiency/ent/generated/predicate"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetCustomerID sets the "customer_id" field.
func (ou *OrderUpdate) SetCustomerID(i int) *OrderUpdate {
	ou.mutation.SetCustomerID(i)
	return ou
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCustomerID(i *int) *OrderUpdate {
	if i != nil {
		ou.SetCustomerID(*i)
	}
	return ou
}

// SetDate sets the "date" field.
func (ou *OrderUpdate) SetDate(t time.Time) *OrderUpdate {
	ou.mutation.SetDate(t)
	return ou
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDate(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetDate(*t)
	}
	return ou
}

// SetTotal sets the "total" field.
func (ou *OrderUpdate) SetTotal(f float64) *OrderUpdate {
	ou.mutation.ResetTotal()
	ou.mutation.SetTotal(f)
	return ou
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTotal(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetTotal(*f)
	}
	return ou
}

// AddTotal adds f to the "total" field.
func (ou *OrderUpdate) AddTotal(f float64) *OrderUpdate {
	ou.mutation.AddTotal(f)
	return ou
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (ou *OrderUpdate) SetCustomer(c *Customer) *OrderUpdate {
	return ou.SetCustomerID(c.ID)
}

// AddProductIDs adds the "products" edge to the OrderProduct entity by IDs.
func (ou *OrderUpdate) AddProductIDs(ids ...int) *OrderUpdate {
	ou.mutation.AddProductIDs(ids...)
	return ou
}

// AddProducts adds the "products" edges to the OrderProduct entity.
func (ou *OrderUpdate) AddProducts(o ...*OrderProduct) *OrderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddProductIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (ou *OrderUpdate) ClearCustomer() *OrderUpdate {
	ou.mutation.ClearCustomer()
	return ou
}

// ClearProducts clears all "products" edges to the OrderProduct entity.
func (ou *OrderUpdate) ClearProducts() *OrderUpdate {
	ou.mutation.ClearProducts()
	return ou
}

// RemoveProductIDs removes the "products" edge to OrderProduct entities by IDs.
func (ou *OrderUpdate) RemoveProductIDs(ids ...int) *OrderUpdate {
	ou.mutation.RemoveProductIDs(ids...)
	return ou
}

// RemoveProducts removes "products" edges to OrderProduct entities.
func (ou *OrderUpdate) RemoveProducts(o ...*OrderProduct) *OrderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if ou.mutation.CustomerCleared() && len(ou.mutation.CustomerIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Order.customer"`)
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Date(); ok {
		_spec.SetField(order.FieldDate, field.TypeTime, value)
	}
	if value, ok := ou.mutation.Total(); ok {
		_spec.SetField(order.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedTotal(); ok {
		_spec.AddField(order.FieldTotal, field.TypeFloat64, value)
	}
	if ou.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CustomerTable,
			Columns: []string{order.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CustomerTable,
			Columns: []string{order.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ProductsTable,
			Columns: []string{order.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderproduct.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedProductsIDs(); len(nodes) > 0 && !ou.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ProductsTable,
			Columns: []string{order.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ProductsTable,
			Columns: []string{order.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetCustomerID sets the "customer_id" field.
func (ouo *OrderUpdateOne) SetCustomerID(i int) *OrderUpdateOne {
	ouo.mutation.SetCustomerID(i)
	return ouo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCustomerID(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetCustomerID(*i)
	}
	return ouo
}

// SetDate sets the "date" field.
func (ouo *OrderUpdateOne) SetDate(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetDate(t)
	return ouo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDate(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetDate(*t)
	}
	return ouo
}

// SetTotal sets the "total" field.
func (ouo *OrderUpdateOne) SetTotal(f float64) *OrderUpdateOne {
	ouo.mutation.ResetTotal()
	ouo.mutation.SetTotal(f)
	return ouo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTotal(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetTotal(*f)
	}
	return ouo
}

// AddTotal adds f to the "total" field.
func (ouo *OrderUpdateOne) AddTotal(f float64) *OrderUpdateOne {
	ouo.mutation.AddTotal(f)
	return ouo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (ouo *OrderUpdateOne) SetCustomer(c *Customer) *OrderUpdateOne {
	return ouo.SetCustomerID(c.ID)
}

// AddProductIDs adds the "products" edge to the OrderProduct entity by IDs.
func (ouo *OrderUpdateOne) AddProductIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.AddProductIDs(ids...)
	return ouo
}

// AddProducts adds the "products" edges to the OrderProduct entity.
func (ouo *OrderUpdateOne) AddProducts(o ...*OrderProduct) *OrderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddProductIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (ouo *OrderUpdateOne) ClearCustomer() *OrderUpdateOne {
	ouo.mutation.ClearCustomer()
	return ouo
}

// ClearProducts clears all "products" edges to the OrderProduct entity.
func (ouo *OrderUpdateOne) ClearProducts() *OrderUpdateOne {
	ouo.mutation.ClearProducts()
	return ouo
}

// RemoveProductIDs removes the "products" edge to OrderProduct entities by IDs.
func (ouo *OrderUpdateOne) RemoveProductIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.RemoveProductIDs(ids...)
	return ouo
}

// RemoveProducts removes "products" edges to OrderProduct entities.
func (ouo *OrderUpdateOne) RemoveProducts(o ...*OrderProduct) *OrderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveProductIDs(ids...)
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if ouo.mutation.CustomerCleared() && len(ouo.mutation.CustomerIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Order.customer"`)
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Date(); ok {
		_spec.SetField(order.FieldDate, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.Total(); ok {
		_spec.SetField(order.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedTotal(); ok {
		_spec.AddField(order.FieldTotal, field.TypeFloat64, value)
	}
	if ouo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CustomerTable,
			Columns: []string{order.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CustomerTable,
			Columns: []string{order.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ProductsTable,
			Columns: []string{order.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderproduct.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedProductsIDs(); len(nodes) > 0 && !ouo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ProductsTable,
			Columns: []string{order.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ProductsTable,
			Columns: []string{order.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
